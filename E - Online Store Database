# Problem Statement: 
Develop a database for any entity you like i.e hospital ,library, school, movie rental, online store. This project involves more queries and database design. For example: For a e store database you can design tables for products, customers, orders, and payments.
I Develop a Database for E-store.

1. CREATE TABLE customers (
    customer_id INT AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(255) NOT NULL,
    last_name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    phone_number VARCHAR(20),
    address TEXT,
    city VARCHAR(100),
    state VARCHAR(100),
    postal_code VARCHAR(20),
    country VARCHAR(100)
  );
  
INSERT INTO customers (first_name, last_name, email, phone_number, address, city, state, postal_code, country)
VALUES('John', 'Doe', 'john.doe@example.com', '123-456-7890', '123 Main St', 'Springfield', 'IL', '62701', 'USA'),
    ('Jane', 'Smith', 'jane.smith@example.com', '987-654-3210', '456 Oak Rd', 'Chicago', 'IL', '60601', 'USA'),
    ('Alice', 'Johnson', 'alice.johnson@example.com', '555-123-4567', '789 Pine Ln', 'Los Angeles', 'CA', '90001', 'USA'),
    ('Bob', 'Brown', 'bob.brown@example.com', '555-987-6543', '101 Maple Ave', 'New York', 'NY', '10001', 'USA'),
    ('Charlie', 'Davis', 'charlie.davis@example.com', '555-555-5555', '202 Birch Blvd', 'Houston', 'TX', '77001', 'USA');

SELECT * FROM Customers;

2. CREATE TABLE products (
    product_id INT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10, 2) NOT NULL,
    category VARCHAR(100),
    stock_quantity INT DEFAULT 0,
    supplier VARCHAR(255)
   );
INSERT INTO products (product_id, product_name, description, price, category, stock_quantity, supplier)
VALUES (1, 'Wireless Mouse', 'Ergonomic wireless mouse', 25.99, 'Electronics', 150, 'TechSupplies Inc.'),
       (2, 'Bluetooth Speaker', 'Portable Bluetooth speaker', 49.99, 'Electronics', 80, 'SoundCo'),
       (3, 'Stainless Steel Water Bottle', '500ml reusable bottle', 15.50, 'Home & Kitchen', 200, 'EcoGoods LLC'),
       (4, 'LED Desk Lamp', 'Adjustable LED desk lamp', 35.00, 'Home & Office', 120, 'BrightLight Ltd.'),
       (5, 'Yoga Mat', 'Non-slip yoga mat', 20.00, 'Fitness', 300, 'FitZone Retailers');

SELECT * FROM products;

3. CREATE TABLE payments (
    payment_id INT AUTO_INCREMENT PRIMARY KEY,
    order_id INT NOT NULL,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    amount DECIMAL(10, 2) NOT NULL,
    payment_method VARCHAR(50) NOT NULL,
    payment_status VARCHAR(50) DEFAULT 'Pending',
    FOREIGN KEY (order_id) REFERENCES orders(order_id)
);

INSERT INTO payments (order_id, amount, payment_method, payment_status)
VALUES
    (1, 99.95, 'Credit Card', 'Completed'),
    (2, 49.99, 'PayPal', 'Completed'),
    (3, 120.50, 'Bank Transfer', 'Completed'),
    (4, 75.00, 'Credit Card', 'Pending'),
    (5, 150.20, 'PayPal', 'Completed');

SELECT * FROM payments

4. CREATE TABLE orders (
    order_id INT AUTO_INCREMENT PRIMARY KEY,
    customer_id INT NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_amount DECIMAL(10, 2) NOT NULL,
    order_status VARCHAR(50) DEFAULT 'Pending',
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
);

INSERT INTO orders (customer_id, total_amount, order_status)
VALUES
    (1, 99.95, 'Pending'),
    (2, 49.99, 'Shipped'),
    (3, 120.50, 'Delivered'),
    (4, 75.00, 'Pending'),
    (5, 150.20, 'Shipped');

SELECT * FROM orders



# SQL queries to handle customer orders.

1. All customer orders, along with the customer and payment information:

SELECT o.order_id, c.first_name, c.last_name, c.email, o.order_date, o.total_amount, o.order_status, p.payment_date, p.amount AS payment_amount, p.payment_method, p.payment_status FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
LEFT JOIN payments p ON o.order_id = p.order_id;

2. All products purchased by each customer:

SELECT o.order_id, c.first_name, c.last_name, p.product_name, p.price, op.quantity, (p.price * op.quantity) AS total_price FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN order_products op ON o.order_id = op.order_id
JOIN products p ON op.product_id = p.product_id;

3. Total sales for each product
   
SELECT p.product_name, SUM(op.quantity) AS total_units_sold, SUM(op.quantity * p.price) AS total_sales FROM order_products op
JOIN products p ON op.product_id = p.product_id
GROUP BY p.product_name;

4. Update order status after payment:

UPDATE orders
SET order_status = 'Pending'
WHERE customer_id =
  AND EXISTS (
    SELECT customer_id
    FROM payments
    WHERE order_id = orders.order_id
    AND payment_status = 'Pending'
  );
